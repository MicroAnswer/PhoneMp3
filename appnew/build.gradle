apply plugin: 'com.android.application'
apply from: '../privateConf.gradle'

// 数据库框架版本号
def dbflow_version = "4.2.4"

// 是Android插件提供的一个扩展类型，可以让我们自定义Android Gradle工程，是Android Gradle工程配置的唯一入
// 口。
android {
    // 是编译所依赖的Android SDK的版本，这里是API Level。
    compileSdkVersion 28
    // 是构建该Android工程所用构建工具的版本。
    buildToolsVersion '28.0.3'
    // defaultConfig是默认的配置，它是一个ProductFlavor。ProductFlavor允许我们根据不同的情况同时生成多
    // 个不同的apk包。
    defaultConfig {

        // Gradle3.0以后要用flavorDimensions的变量必须在defaultConfig{}中定义才能使用
        flavorDimensions 'applicationId'
        flavorDimensions 'versionName'

        // 配置我们的包名，包名是app的唯一标识，其实他跟AndroidManifest里面的package是可以不同的，他们之
        // 间并没有直接的关系。
        // applicationId "answer.android.phonemp3"

        // 是支持的Android系统的api level，这里是15，也就是说低于Android 15版本的机型不能使用这个app。
        minSdkVersion 15

        // 表明我们是基于哪个Android版本开发的，这里是28。
        targetSdkVersion 28

        // 表明我们的app应用内部版本号，一般用于控制app升级，当然我在使用的bugly自动升级能不能接受到升级推送
        // 就是基于这个。
        versionCode 7

        // 表明我们的app应用的版本名称，一般是发布的时候写在app上告诉用户的
        // versionName '2.2.0'

        // 用于配置该BuildType是否启用自动拆分多个Dex的功能。一般用程序中代码太多，超过了65535个方法的时候。
        multiDexEnabled false

        // 多平台编译，生成有so包的时候使用，包括四个平台’armeabi’, ‘x86’, ‘armeabi-v7a’, ‘mips’。一般
        // 使用第三方提供的SDK的时候，可能会附带so库。
        ndk {

        }
    }
    // 源代码集合，是Java插件用来描述和管理源代码及资源的一个抽象概念，是一个Java源代码文件和资源文件的集合，
    // 我们可以通过sourceSets更改源集的Java目录或者资源目录等。
    sourceSets {
        main {
        }
    }

    // 构建类型，在Android Gradle工程中，它已经帮我们内置了debug和release两个构建类型，两种模式主要区别在
    // 于，能否在设备上调试以及签名不一样，其他代码和文件资源都是一样的。
    buildTypes {
        // 正式版本配置。
        release {
            // 应用id后缀
            applicationIdSuffix
            // 版本名称后缀
            versionNameSuffix
            // 签名配置
            signingConfig signingConfigs.meCfg
            // 是否混淆
            minifyEnabled false
            // 混淆文件
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            // 是否生成一个debug的apk
            debuggable true
            // 清单占位符
            manifestPlaceholders
            // 是否去除未利用的资源，默认false，表示不去除。
            shrinkResources false
            // 是否拆成多个Dex
            multiDexEnabled false
            // 指定文本文件编译进主Dex文件中
            multiDexKeepFile
            // 指定混淆文件编译进主Dex文件中
            multiDexKeepProguard
        }
        debug {
            signingConfig signingConfigs.meCfg
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            debuggable true
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    // 在我看来他就是Gradle的多渠道打包，你可以在不同的包定义不同的变量，实现自己的定制化版本的需求。
    productFlavors {
        // 测试版
        PhoneMp3Test {
            applicationId 'answer.android.phonemp3'
            versionName '2.2.0'
            // 占位符，我们可以通过它动态配置AndroidManifest文件一些内容,譬如app的名字
            manifestPlaceholders = [APP_NAME: "音乐怎么了(Test)"]
            // 他是BuildConfig文件的一个函数，而BuildConfig这个类是Android Gradle构建脚本在编译后生成的。
            buildConfigField "String", "desc", "\"测试版本\""
            buildConfigField "Boolean", "isDev", "true"
        }
        // 正式版
        PhoneMp3Release {
            applicationId 'answer.android.phonemp3'
            versionName '2.2.0'
            // 占位符，我们可以通过它动态配置AndroidManifest文件一些内容,譬如app的名字
            manifestPlaceholders = [APP_NAME: "音乐怎么了"]
            buildConfigField "Boolean", "isDev", "false"
            // 他是BuildConfig文件的一个函数，而BuildConfig这个类是Android Gradle构建脚本在编译后生成的。
            buildConfigField "String", "desc", "\"正式版本\""
        }
    }
}

dependencies {
    // 首先第一句compile fileTree(include: [‘.jar’], dir: ‘libs’)*，这样配置之后本地libs文件夹下的扩展
    // 名为jar的都会被依赖，非常方便。
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    // 如果你要引入某个本地module的话，那么需要用compile project(‘×××’)。
    implementation 'androidx.appcompat:appcompat:1.1.0-alpha02'
    implementation 'com.android.support:support-v4:28.0.0'
    implementation 'com.google.android.material:material:1.1.0-alpha03'
    implementation 'com.github.bumptech.glide:glide:4.8.0'
    implementation 'com.squareup.okhttp3:okhttp:3.12.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.8.0'
    implementation 'com.alibaba:fastjson:1.2.47'
    // 下面是数据库框架
    implementation "com.github.Raizlabs.DBFlow:dbflow-core:${dbflow_version}"
    implementation "com.github.Raizlabs.DBFlow:dbflow:${dbflow_version}"
    annotationProcessor "com.github.Raizlabs.DBFlow:dbflow-processor:${dbflow_version}"
}
